Utilizing Java: 
- In the Upwork Enterprises project, Java was a core part of the automation framework and 
- was utilized extensively for both UI testing with Selenium and API testing with Rest Assured. 
- Some are the key areas where I leveraged Java:


1. Building and Maintaining the Automation Framework:
- I developed a hybrid automation framework using Java that combined Selenium for UI automation 
  and Rest Assured for API automation. 
- Java’s object-oriented nature allowed for clean, modular, and maintainable code.
- The framework used Java classes to implement the Page Object Model (POM), ensuring that 
  the web elements and actions were encapsulated in separate page classes. 
  This improved code reusability and made it easy to update the tests whenever the application’s UI changed.


2. UI Automation with Selenium: 
- Java was used to implement Selenium WebDriver for UI automation. 
- Using Java allowed me to write WebDriver commands, handle dynamic elements, manage synchronization issues, 
  and create reusable methods for interacting with UI components like buttons, input fields, and dropdowns.
- Java’s support for collections, loops, and conditional statements helped in iterating through 
  multiple elements, performing validations, and making decisions based on the application’s state 
  during test execution.


3. API Automation with Rest Assured:
- Rest Assured, a Java library, was used for API automation. 
- Java allowed me to create HTTP requests (GET, POST, PUT, DELETE) and validate API responses using assertions.
- I used Java’s exception handling to manage API timeouts, response validation failures, and error codes 
  gracefully, ensuring robust and error-resistant API testing.
- For complex APIs, I used Java POJO (Plain Old Java Objects) classes to serialize and deserialize JSON responses, 
  ensuring that the API request/response structure was handled cleanly.


4. BDD with Cucumber (Java Step Definitions):
- I used Cucumber for writing BDD scenarios in Gherkin syntax, and Java was used to implement the 
  step definitions for these scenarios. Java methods mapped to each step in the Gherkin feature file, 
  performing UI or API actions using Selenium and Rest Assured.
- Java enabled us to separate test scenarios from the implementation details, making it easier for non-technical 
  team members to collaborate and understand the tests.


5. Integration with CI/CD and Test Reporting: 
- Java was used to integrate the automation framework with Jenkins and GitHub CI for continuous integration 
  and deployment (CI/CD). 
- The framework supported automatic execution of tests after each build or deployment.
- Java’s TestNG libraries were used for test case organization, execution, and generating reports. 
- These reports helped identify which tests passed, failed, or were skipped during execution.
- Extent Reports (Java library) were integrated to generate detailed HTML reports with screenshots 
  and logs for each test execution.


6. Handling Data-Driven Testing: 
- Java’s Apache POI library was used to read and write data from Excel files, enabling data-driven testing. 
- By using Excel or JSON as external data sources, I was able to run the same tests with different sets of data, 
  improving test coverage.
- The DataProvider feature in TestNG also allowed me to supply multiple data sets to a test method, 
  making it easier to validate various input scenarios.


7. Exception Handling and Logging: 
- Java’s try-catch blocks were used for error handling to ensure that the automation scripts did not fail 
  when encountering issues like element not found, timeouts, or API failures.
- I implemented log4j for logging, which provided detailed logs during test execution, 
  helping to debug issues by tracking the actions performed and any failures encountered during the test runs.